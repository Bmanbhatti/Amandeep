/*
1. In SQL Server, assuming you can find the result by using both joins and subqueries, which one would you prefer to use and why? 

I will go with joins since they are faster than subquries 

2. What is CTE and when to use it? 
A Common Table Expression (CTE) is the result set of a query,
which exists temporarily and for use only within the context of a larger query. 
Much like a derived table, the result of a CTE is not stored and exists only for the duration of the query.
This article will focus on non-recurrsive CTEs.

3. What are Table Variables? What is their scope and where are they created in SQL Server? 
The table variable is a special type of the local variable that helps to store data temporarily,
similar to the temp table in SQL Server. In fact, the table variable provides all the properties of the local variable, but the local variables have some limitations, unlike temp or regular tables.

4. What is the difference between DELETE and TRUNCATE? Which one will have better performance and why? 
Delete is a DML command whereas truncate is DDL command. Truncate can be used to delete the entire data of the table without maintaining the integrity of the table.
On the other hand , delete statement can be used for deleting the specific data
I would go with delete since you cant mess you any bad relations in the process of deleting one

5. What is Identity column? How does DELETE and TRUNCATE affect it? 
An identity column is a column (also known as a field) in a database table that is made up of values generated by the database. This is much like an AutoNumber field in Microsoft Access or a sequence in Oracle.

6.What is difference between “delete from table_name” and “truncate table table_name”? 
The DELETE statement removes rows one at a time and records an entry in the transaction log for each deleted row. 
TRUNCATE TABLE removes the data by deallocating the data pages used to store the table data and records only the page deallocations in the transaction log
*/

--quries 
--1--

select distinct c.City from dbo.employees e
inner join dbo.Customers  c
on e.City =c.City

--2--
select distinct city from dbo.Customers
where city not in (select city from dbo.Employees);

--2b--
select c.city from dbo.Customers c
 LEFT JOIN dbo.employees e
ON c.[city] = e.[City]
where e.City is null
order by city 
-- or 
select distinct c.city from dbo.Customers c
 LEFT JOIN dbo.employees e
ON c.[city] = e.[City]
order by city 



----3----

select p.ProductID, p.UnitPrice ,dt.total from dbo.Products p inner join (select ProductID , sum(Quantity) as 'total' from dbo.[Order Details]
group by ProductID ) dt
on p.ProductId= dt.ProductID
order by total desc 

---4----

SELECT c.City,
SUM(od.Quantity) AS QTY FROM
Customers c
LEFT JOIN
Orders o
ON c.CustomerID = o.CustomerID
LEFT JOIN
[Order Details] od
ON o.OrderID = od.OrderID
GROUP BY c.City
ORDER BY QTY desc

--5---
select u.City from Customers u group by u.City having COUNT(u.CustomerID) > 2
union
select c.City from Customers c group by c.City having COUNT(c.CustomerID) = 2

--5b--

  select city from (select city, count(CustomerID) as numberofcust from dbo.Customers
  group by City) dt where dt.numberofcust >= 2 ;

  ---6----


select distinct c.City
from Orders o inner join Customers c
on o.CustomerID = c.CustomerID
inner join [Order Details] r
on r.OrderID = o.OrderID
group by c.City, r.ProductID
having count(r.ProductID) > 2
   
   ---7----
   select distinct  c.* from Customers c inner join dbo.Orders o
   on c.CustomerID = o.CustomerID
   where c.City != o.ShipCity

---8----

WITH cte_ordersc
as(
SELECT oc.ShipCity,oc.ProductID, oc.average,DENSE_RANK() over (partition by
oc.ProductID order by oc.number) rnk FROM (
SELECT TOP(5) od.ProductID,o.ShipCity, SUM(Quantity) number,AVG(od.UnitPrice)
average FROM dbo.Orders o left join dbo.[Order Details] od on o.OrderID=od.OrderID
GROUP BY o.ShipCity, od.ProductID
ORDER BY number DESC
) oc
)
select * from cte_ordersc where rnk=1
--9---
select e.City from Employees e
where e.City not in (
select c.City from Orders o inner join Customers c
on c.CustomerID = o.CustomerID) --b-- select distinct e.City from Employees e
left join Customers c
on e.City = c.City
where c.City is null--10--select * from
(select Top 1 e.City, count(o.OrderID) countOrder from Employees e inner join Orders o
on e.EmployeeID = o.EmployeeID
group by e.City) T1
inner join (
select Top 1 c.City, count(r.Quantity) countQuantity from [Order Details] r inner join
Orders d on r.OrderID = d.OrderID
inner join Customers c on c.CustomerID = d.CustomerID group by c.City) T2
on T1.City = T2.City;


--11How do you remove the duplicates record of a table?
Find duplicate rows using GROUP BY clause or ROW_NUMBER() function.
Use DELETE statement to remove the duplicate rows.--12---create table  employee ( empid integer, mgrid integer,
deptid integer, salary integer);create table Dept (deptid integer, deptname text);SELECT deptname,empid,salary, rnk
FROM(
SELECT d.deptname, e.empid, e.salary, rank() OVER ( PARTITION BY e.deptid ORDER BY
 e.salary DESC ) AS rnk
 FROM dept d, employee e
 WHERE d.deptid = e.deptid
 )
Where rnk <= 3
ORDER BY deptname,rnk

---13---

select countbydept.*
from (
 select deptid, count(*) as departCount
 from Employee
 group by deptid
 order by departCount desc
 limit 1
) as maxcount
inner join
( select dept.id, dept.`name`, count(*) as employeeCount
 from Dept 
  inner join Employee on Employee.deptid = deptid
 group by deptid, deptname
) countbydept

---14---

SELECT deptname,empid,salary
FROM (
SELECT d.deptname, e.empid, e.salary, rank() OVER ( PARTITION BY e.deptid ORDER BY
e.salary DESC ) AS rnk
 FROM dept d, employee e
 WHERE d.deptid = e.deptid
 )
WHERE rnk <= 3
ORDER BY deptname,rnk
